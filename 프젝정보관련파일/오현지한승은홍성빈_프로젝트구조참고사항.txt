[ 파일 기본 구조 ]

index.html - 사이트 접속시 첫 메인 화면 
categoryPage.html - 카테고리 페이지

index.js - 사이트 접속시 메인화면에서 기본적으로 수행할 동작들 선언
mainPage.js - index 안의 메인페이지 섹션 + 헤더섹션 내부 동작들 선언
loginPage.js - index안의 로그인페이지 섹션 내부 동작들 선언
categoryPage.js - 카테고리페이지 내부 동작들 선언

userInfo.js - 메인과 카테고리 페이지 모두에서 동작할 코드모음으로 기본적으로 유저정보를 다루는 코드
             - ex) 로그인/로그아웃, 회원탈퇴, 현재 페이지에 접속한 방법에 따른 유저정보 체크 및 동작
             ++ 참고) 메인페이지에서는 쓰이지 않지만 유저정보를 다루는 내용인 즐겨찾기 추가/제거 로직도 해당 파일안에 선언되어있음

[ 소개할만한 내용 ]

1) 문서 로드 시점에 따른 이벤트 할당 (userInfo.js 파일 참조)

window.onload = function (event) {
  페이지가 로드되자마자 실행할 내용들 = 1순위
  -> 주로 유저 정보 체크 관련된 내용 수행 
};

window.onpageshow = function () {
  페이지가 로드되고 난 후 pageshow 될 때 실행할 내용들 = 2순위
  ->  화면 기본 구성을 위한 이벤트들 할당 실행 등
  -> init( ) 이라는 이벤트 할당 로직 모음집을 만들어두고 해당 메서드를 실행시킴 
};

-- 마지막에 모두의 코드를 합치는 과정에서 시간이 부족하여 완벽하게 나눠놓지는 못했지만 최대한 나눠서 실행시켰음
   (index.js /상단부, categoryPage.js /하단부 쪽 파일상 확인 가능)

2) localStorage
 
- 캐시보다 다루기가 손쉬우며 캐시보다 더 오래 데이터를 남겨둘 수 있다는 점에서 localStorage를 사용
- json 형식의 활용과 js object 다루는 것에 많은 연습이 되었음
- 유저의 기본 구조를 만들어 회원가입 시키는 로직은 loginPage.js에서 확인 가능
- 유저 리스트 객체 구조 예시
userList : {
      ["user"]: {
        email: "user",
        Pwd: *****
        favorite: {},
      },
      ["user2"]: {
        email: "user2",
        Pwd: ****,
        favorite: {},
      },
      .....
}
 ++ 참고) 유저의 아이디값을 각 유저 객체의 키값으로 삼았음 -> 추후 유저의 아이디만을 가지고 손쉽게 해당 유저 데이터를 불러올 수 있게하기 위함
  

3) performance.getEntriesByType('navigation')[0].type;

- 해당 명령어로 현재 페이지에 어떤식으로 들어왔는지 알 수 있음
- reload, back_forward, url 등
- 해당 명령어로 현재 페이지에 접속한 방식에 따라 로그인 정합성 확인 체크를 진행함

++ 참고) 구현해둔 로그인 로직 구성
  1. (window.onload) 만약 페이지 접속 방식이 url이라면
     (reload새로고침, back_forward앞/뒤로가기 시엔 로그인상태 체크X)
      1-1. 기본적으로 로컬스토리지 상  currentUser라는 현재 유저값 삭제
      1-2. 로컬스토리지에 beforeUser 라는 값이 있다면 다시 해당값으로 currentUser 생성 후 beforeUser 삭제
  2. (window.onpageshow) 로컬스토리지 상 currentUser라는 값이 있는지 확인
      2-1. 값이 있다면 로그인창 띄우지 않음
      2-2  값이 없다면 로그인창 띄움
  3. currentUser 확인하는 로직은 따로 함수로 작성해두고 로그아웃, 로그인, 등등의 이벤트가 있을시마다 재활용 할 수 있도록 작성
 
------------------------------

※ 소개하고자 하는 내용은 아니지만 전체 로직 구조 파악시 참고사항

- 이미지 위치 할당
  - 이미지가 위치할 상위 요소를 display: grid로 잡고 각 row가 10px씩 자동으로 증가되도록 설정
  - 각 이미지 위치를 grid를 사용하여 잡았는데 시작지점은 자동으로 잡았지만 이미지가 차지해야할 끝지점은 값을 자동으로 잡을 수 없었음
  -> 따라서 각 이미지 src가 로드 된 이후 해당 이미지 height값을 가져와서 얼만큼 영역을 차지해야하는지 알아낸 이후 css에 grid-row-end 설정을 해주는 과정이 들어감

- unsplash, picsum 각 무료 이미지 api 사이트에서 제공하는 객체 형식이 달라서 메서드도 각각 만들어짐
- unsplash를 주로 사용하게 되었는데 무료 api라서 하나의 키에서 일정량 이상 소스가 사용되면 403을 반환함
  이런 현상에 대응하기 위해 키값을 2개 준비하고 에러코드 발생시 다른 키값으로 대체되어 실행되도록 함

- 페이지들의 큰 동작 방식 : opacity :  0, display : none으로 숨겨두고 그때그때 필요한 페이지만 해당 값들을 바꿔서 사용하는 방식을 주로 씀





