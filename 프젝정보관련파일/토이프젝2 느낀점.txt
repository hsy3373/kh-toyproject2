- 공통 목표
  - 협업을 위한 코딩(코드중복 ▽, 쉽게 유추 가능한 id 값 등)
  - 설명을 위한 주석 넣기
  - 공통 관리 구역에 대한 변경 있을 시 꼭 알려주기


ajax를 통한 외부 api 연결 및 비동기(데이터의 수신을 기다리지 않고 다른것부터 하는것) 처리 사용

- 기능
  - 이미지 api 불러오기
  - 이미지 즐겨찾기 설정 기능(로그인 후 이용 가능)
  - 로그인 된 사용자 정보에 따른 즐겨찾기 불러오기
  - 이미지 즐겨찾기 넣고 빼기
  - 이미지 클릭 시 디테일 페이지 불러오기


 - local storage 사용 json 파싱 처리
Json 단순 문자열 파싱

파싱 없이 set "string"
  - 로컬스토리지 상 저장 형태 : string
  - 파싱 get : 에러 발생
  - 파싱 없이 get :   "string"

파싱 set "string"
  - 로컬스토리지 상 저장 형태 : "string"
  - 파싱 get : "string"
  - 파싱 없이 get : ""string""

window.onload  , window.onpageshow

-> load 이벤트 다음에 pageshow 이벤트를 발생시킴
순차적으로 이벤트 동작시키기 수월했음

이곳에 사용은 못했지만 beforeunload 이벤트도 흥미로웠음
$(window).bind('beforeunload', function (e) { });

페이지가 닫히거나 새로고침되는, 말그대로의 unload 전에 이벤트를 실행시킨다

로그인 관련 구현이 빡셌음

처음엔 beforeunload를 사용해서 페이지가 닫힐 때 현재 유저값을 제거해서
로그아웃을 구현했는데 js에서는 페이지가 닫히는 것과 새로고침 되는 것을 구분하지 않고 동급으로 취급해서
새로고침만 해도 다시 로그인을 해야하는 이슈가 발생
document.onkeydown를 사용해 f5버튼 등, 키보드로 새로고침을 발생시킬 수 있는 키들이 눌리면 간이로 현재 로그인 유저를
저장시키는 방법도 사용했으나 웹 페이지 자체에 있는 새로고침 버튼은 인식하지 못함 ->  완벽하지 못함

결국 위 방법들을 폐기하고 다른 방법을 사용함
performance.getEntriesByType('navigation') 를 사용해서 현재 페이지가 어떤식으로 열렸는지에 대한 정보를 가져옴
url, reload,  back_forward 등으로 현재 페이지가 어떻게 해서 열렸는지의 정보를 알려줌
현재 페이지가 새로고침되었거나 , 뒤로가기 등으로 인해 열린 경우를 제외하고 url로 인해 바로 열렸을 경우에만 대응해줄 수 있게 됨

의도된 재진입의 경우 beforeUser 라는 값을 저장시키고
다시 열린페이지에서 해당 값이 있는지만 확인 후 있으면 자동 로그인, 없으면 로그아웃 처리 진행









웹 페이지의 라이프사이클 알면 더 좋을 것임 


